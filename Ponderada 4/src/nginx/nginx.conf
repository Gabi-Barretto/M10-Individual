events {}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    lua_shared_dict log_dict 10m;

    upstream user_service {
        server user-service:8000;
    }

    upstream todo_service {
        server todo-service:8000;
    }

    upstream image_service {
        server image-service:8000;
    }

    upstream log_service {
        server log-service:8000;
    }

    server {
        listen 80;

        location /user/ {
            proxy_pass http://user_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /todo/ {
            proxy_pass http://todo_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /image/ {
            proxy_pass http://image_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /log/ {
            proxy_pass http://log_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    init_worker_by_lua_block {
        local http = require "resty.http"
        local log_dict = ngx.shared.log_dict

        local function send_log()
            local log_entry = log_dict:rpop("logs")
            if log_entry then
                local httpc = http.new()
                local res, err = httpc:request_uri("http://localhost:8004/log/logs", {
                    method = "POST",
                    body = log_entry,
                    headers = {
                        ["Content-Type"] = "application/json",
                    },
                })
                if not res then
                    ngx.log(ngx.ERR, "failed to send log: ", err)
                    return
                end
                ngx.log(ngx.INFO, "log sent: ", res.status)
            end
        end

        ngx.timer.every(1, send_log)
    }

    log_by_lua_block {
        local log_dict = ngx.shared.log_dict
        local log_entry = string.format('{"level": "INFO", "message": "%s"}', ngx.var.request)
        log_dict:lpush("logs", log_entry)
    }
}
